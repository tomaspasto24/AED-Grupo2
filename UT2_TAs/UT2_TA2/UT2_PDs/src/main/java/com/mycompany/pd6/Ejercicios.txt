Ejercicio 1:

Comparando la solución del algoritmo fibonacci recursivo sin programación dinámica y la solución integrando programación
dinámica, me sorprende enormemente los procesos repetitivos que procesa la primera solución y que hacen que el algoritmo
sea ineficiente, costo de O(n2) mientras que la segunda solución, el costo de órden baja a O(n). Por ejemplo en la solución
integrando programación dinámica el método recursivo se invoca 2315 veces de las cuales 1157 son procesos repetidos.
La solución más óptima para fibonacci es iterar, porque en el caso de usar recursividad el órden de ejecución es mayor.

Ejercicio 2:

Como se menciono anteriormente, este algoritmo es la solución de fibonacci más eficiente porque es de costo de órden O(n),
igual que el ejercicio 1 implementando memoización pero con la ventaja que este algoritmo es iterable mientras que el
anterior trabaja con llamadas recursivas, las cuales pueden sobrecargar el stack.
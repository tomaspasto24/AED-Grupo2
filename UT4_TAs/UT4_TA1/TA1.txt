Ej1:

Preorden:
X, B, A, J, R, T, M, S, W, C, Z, F

Postorden:
R, T, J, A, B, C, F, Z, W, S, M, X

Inorden:
A, R, J, T, B, X, M, S, C, W, F, Z

1. c.
2. b.
3. c.





Ej3:

1. Calcula la altura de un árbol, recorriéndolo en postorden.
2. Su orden de ejecución es O(N).





Ej4:

Lenguaje natural: Dado un árbol binario y un diccionario de variables. Si el arbol tiene hijos, evaluar los dos hijos con el mismo diccionario y evaluar sus resultados con la operación de la raíz. Si no, y si es un número constante, devolver dicho número. Si no, devolver el valor de la variable especificado por el diccionario.

Precondiciones:
El diccionario contiene las entradas para mapear todas las variables del árbol binario a números.
El árbol es un árbol binario completo.
Todas las hojas contienen variables o constantes.
Todos los nodos internos contienen una de las cuatro operaciones binarias disponibles: "+", "*", "-" y "/".
Los subárboles derechos de todos los nodos con la operación "/" evaluan a números distintos de 0.

Poscondiciones:
El árbol y el diccionario se mantienen intactos.

Pseudocódigo:
Función arbol.evaluar(dicc)
	Si this.izq no es null hacer
		izqres = this.izq.evaluar(dicc)
		derres = this.der.evaluar(dicc)
		Si this.valor == "+"
			Devolver izqres + derres
		Sino si this.valor == "*"
			Devolver izqres * derres
		Sino si this.valor == "-"
			Devolver izqres - derres
		Sino si this.valor == "/"
			Devolver izqres / derres
		Sino
			Devolver null
	Sino
		constanteOp = strToInt(this.valor)
		Si constanteOp es null hacer
			Devolver dicc[this.valor]
		Sino
			Devolver constanteOp
	Fin si
Fin

Orden de ejecución:
El orden de ejecución es lineal, porque ejecuta una operación de orden O(1) para cada nodo (sin contar recursividad).
